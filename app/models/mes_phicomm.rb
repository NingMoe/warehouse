class MesPhicomm

  def self.check_sn(barcode_sn)
    sql = "select sn from txdb.phicomm_mes_001 where sn=?"
    records = PoReceipt.find_by_sql([sql, barcode_sn])
    if records.present?
      sn = records.first.sn
    else
      sn = 'N/A'
    end
    sn
  end

  def self.print_mac_addr(barcode_sn, printer_ip)
    sql = "select mac_add from txdb.phicomm_mes_001 where sn=?"
    records = PoReceipt.find_by_sql([sql, barcode_sn])
    if records.present?
      mac_add = records.first.mac_add
      print_mac_addr_label(mac_add, printer_ip)
    else
      mac_add = 'N/A'
    end
    mac_add
  end

  def self.print_mac_addr_label(mac_add, printer_ip)
    zpl_command = "
        ^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR4,4~SD15^JUS^LRN^CI0^XZ
        ^XA
        ^MMT
        ^PW531
        ^LL0177
        ^LS0
        ^BY2,3,56^FT76,137^BCN,,N,N
        ^FD>:#{mac_add}^FS
        ^FT138,66^A0N,25,24^FH
        ^FD#{mac_add}^FS
        ^FT90,66^A0N,25,24^FH
        ^FDSN:^FS
        ^PQ1,0,1,Y^XZ
    "
    s = TCPSocket.new(printer_ip, '9100')
    s.write zpl_command
    s.close
  end

  def self.print_sn(barcode_sn, printer_ip)
    sql = "select sn from txdb.phicomm_mes_001 where sn=?"
    records = PoReceipt.find_by_sql([sql, barcode_sn])
    if records.present?
      sn = records.first.sn
      print_sn_label(barcode_sn, printer_ip)
    else
      sn = 'N/A'
    end
    sn
  end

  def self.print_sn_label(sn, printer_ip)
    zpl_command = "
      ^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR4,4~SD15^JUS^LRN^CI0^XZ
      ^XA
      ^MMT
      ^PW531
      ^LL0177
      ^LS0
      ^BY2,3,56^FT76,137^BCN,,N,N
      ^FD>:#{sn}^FS
      ^FT138,66^A0N,25,24^FH
      ^FD#{sn}^FS
      ^FT90,66^A0N,25,24^FH
      ^FDSN:^FS
      ^PQ1,0,1,Y^XZ
    "
    s = TCPSocket.new(printer_ip, '9100')
    s.write zpl_command
    s.close
  end

  def self.print_sn1(barcode_sn, printer_ip)
    sql = "select sn from txdb.phicomm_mes_001 where sn=?"
    records = PoReceipt.find_by_sql([sql, barcode_sn])
    if records.present?
      sn = records.first.sn
      print_sn1_label(barcode_sn, printer_ip)
    else
      sn = 'N/A'
    end
    sn
  end

  def self.print_sn1_label(sn, printer_ip)
    zpl_command = "
      ^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR4,4~SD15^JUS^LRN^CI0^XZ
      ^XA
      ^MMT
      ^PW531
      ^LL0177
      ^LS0
      ^BY2,3,56^FT58,137^BCN,,N,N
      ^FD>:#{sn}^FS
      ^FT121,66^A0N,25,24^FH
      ^FD#{sn}^FS
      ^FT73,66^A0N,25,24^FH
      ^FDSN:^FS
      ^PQ1,0,1,Y^XZ
    "
    s = TCPSocket.new(printer_ip, '9100')
    s.write zpl_command
    s.close
  end

  def self.print_sn2(barcode_sn, printer_ip)
    sql = "select sn from txdb.phicomm_mes_001 where sn=?"
    records = PoReceipt.find_by_sql([sql, barcode_sn])
    if records.present?
      sn = records.first.sn
      print_sn2_label(barcode_sn, printer_ip)
    else
      sn = 'N/A'
    end
    sn
  end

  def self.print_sn2_label(sn, printer_ip)
    zpl_command = "
      ^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR4,4~SD15^JUS^LRN^CI0^XZ
      ^XA
      ^MMT
      ^PW531
      ^LL0177
      ^LS0
      ^BY2,3,56^FT76,137^BCN,,N,N
      ^FD>:#{sn}^FS
      ^FT138,66^A0N,25,24^FH
      ^FD#{sn}^FS
      ^FT90,66^A0N,25,24^FH
      ^FDSN:^FS
      ^PQ1,0,1,Y^XZ
    "
    s = TCPSocket.new(printer_ip, '9100')
    s.write zpl_command
    s.close
  end

  def self.print_color_box(barcode_sn, printer_ip)
    sql = "select mac_add from txdb.phicomm_mes_001 where sn=?"
    records = PoReceipt.find_by_sql([sql, barcode_sn])
    if records.present?
      mac_add = records.first.mac_add
      print_color_box_label(barcode_sn, printer_ip)
    else
      mac_add = 'N/A'
    end
    mac_add
  end

  def self.print_color_box_label(sn, printer_ip)
    zpl_command = "
      ^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR4,4~SD15^JUS^LRN^CI0^XZ
      ^XA
      ^MMT
      ^PW768
      ^LL0413
      ^LS0
      ^FT93,239^A0N,22,19^FH\^FDS/N:^FS
      ^FT129,240^A0N,21,21^FH\^FD#{sn}^FS
      ^BY1,3,47^FT92,295^BCN,,N,N
      ^FD>:#{sn}^FS
      ^PQ1,0,1,Y^XZ
    "
    s = TCPSocket.new(printer_ip, '9100')
    s.write zpl_command
    s.close
  end

  def self.print_outside_box(params)
    # params field
    # barcode
    # rowcounter
    # printer_ip
    # pack_qty
    # mo_number
    # carton_number
    # sn1
    # sn2
    # sn3
    # sn4
    # sn5
    # sn6
    # sn7
    # sn8
    # sn9
    error_msgs = []
    error_msgs.append "打印機IP不可為空!" if params[:printer_ip].blank?
    error_msgs.append "工單號碼不可為空!" if params[:mo_number].blank?
    error_msgs.append "包裝數量不可為空!" if params[:pack_qty].blank?
    error_msgs.append "包裝箱號不可為空!" if params[:carton_number].blank?
    error_msgs.append "掃入條碼不可為空!" if params[:barcode].blank?

    sn_array = []
    (1..9).each do |i|
      sn_array.append params["sn#{i}"] if params["sn#{i}"].present?
    end
    error_msgs.append "條碼重複掃描!" if sn_array.include?(params[:barcode])

    sql = "select mac_add from txdb.phicomm_mes_001 where sn=?"
    records = PoReceipt.find_by_sql([sql, params[:barcode]])
    if records.present?
      mac_add = records.first.mac_add
      error_msgs.append "S/N未和MAC地址綁定!" if mac_add.blank?
    else
      error_msgs.append "S/N不存在或者錯誤!"
    end

    carton_number = (params[:carton_number] || '1').to_i
    if error_msgs.blank?
      #加入SN數組
      sn_array.append params[:barcode]
      if (params[:pack_qty] || '1').to_i == sn_array.size
        label_barcode = "#{params[:mo_number]}C#{carton_number.to_s.rjust(4, '0')}"
        sn_array_text = sn_array.join("','")
        sql = "update txdb.phicomm_mes_001 set cartonnumber = '#{label_barcode}', woid='#{params[:mo_number]}' where sn in ('#{sn_array_text}')"
        PoReceipt.connection.execute sql
        #避免SN數組少於9個元素
        (sn_array.size..8).each {sn_array.append ''}

        # 打印标签
        print_outside_box_label(label_barcode, sn_array, params)
        carton_number += 1
        sn_array.clear
      end
    end
    (sn_array.size..8).each {sn_array.append ''}
    return [sn_array, error_msgs, mac_add, carton_number.to_s.rjust(4, '0')]
    #print_outside_box_label(barcode_sn, printer_ip)
  end

  def self.print_outside_box_label(label_barcode, sn_array, params)
    zpl_command = "
      ^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR4,4~SD15^JUS^LRN^CI0^XZ
~DG000.GRF,13440,084,
,:::::::::gM03FLFA0I0HF80I020FFA03FE80022FLFE002FKFE0I0FE0K0203FE03FA0L02FF80020I0A00A0N02,gM07FMFC001FFC0J01FFC03FF80H0NFC007FLFC001FFC0L07FE07FF0L01FF80L0F01C,gM0OFE001FFC0J01FFC03FF8003FMF803FMFE801FFE0L0HFE07FF80K03FF80L0E00E0K0E0,gL01FLFDFF001FFC0J01FFC03FF8007FMFH07FLFDF801FFE0K01FFE07FFC0K07FF80L0C00C0K0F01FHFDFF0,gL03FOFE03FFE0J03FFE03FF800FNFH0PFE01FHFL03FFE07FFE0K0IF80H02AHAE00EAHA800F83FKF8,gL01FOFC01FFC0J01FFC03FF801FNF01FOFE01FHFL07FFE07FFC0J01FHF80H03FIF01FIF8007C1FKF0,gL03FHF80H03FFE01FFC0J01FFC03FF803FFE80K01FHF80H0BFHF01FHF80J0IFE07FFE0J01FHF80H03FHFE00FIF8003E08BE88F8,gL01DFC0J0DFD01FDC0J01FFC01FF807DFC0L01FFE0I01FHF01DFDC0J0FDFC05FHFK03FFD80L0E00C0K01D001C0070,gL03FFE0J07FF83FFE0J03FFE03FF807FF80L03FFE0J0IF81FHFE00202FHFE07FHFA0H023FHF80020H02E00E0J020F803E0078,gL01FFC0J07FF01FFC0J01FFC03FF807FF80L03FFC0J07FF81FIFJ01FHFE07FHF80I07FHF80L0F01C0L07801C0070,gL03FFC0J07FF81FFC0J01FFC03FF80FHF80L03FF80J07FF81FIF80H03FHFE07FHFC0I0JF80L0E00E0L02801E0078,gL01FFC0J07FF81FFC0J01FFC03FF807FF0M03FF80J03FF81FIFJ07FHFE07FHFC0H01FIF80H01FHFE00FIFM01C0070,gL03FFC0J07FF83FFE0J03FFE03FF80FHFN03FF80J03FF81FIF80H0JFE07FHFE0H03FIF80H03FHFE00FIF80K03E0078,gL01FFC0J07FF81FFC0J01FFC03FF807FF0M03FF80J03FF81FIFC0H0JFE07FIFI03FIF80H01FIF01FIFM01C0070,gL03FFC0J07FF81FFC0J01FFC03FF80FHFN03FF80J03FF81FIFE0H0JFE07FIF8003FIF80L0E00E0O01E0078,gL01DFC0J05FF81FDC0J01FFC03FD807DF0M07FD80J03DF81DFHFC001DFHFC07FDFF8007FDFD80L0E00C0O01C0070,gL03FFC0J07FF83FFE0I023FFE03FF80FHFN03FF80J03FF81FFEFF003FAFFE07FFBFE00FE3FF80K02E00E0J0I2H03E0078,gL01FFC0J07FF81FHFK03FFC03FF807FF0M03FF80J03FF81FFC3F807F0FFE07FF0FE01FC3FF80L0F01C0J03FE001C0070,gL03FFC0J07FF81FHF80I0IFC03FF80FHFN03FF80J03FF81FFE3FE8FE0FFE07FF8FF8BF83FF80H07FHFE00FIFC03FE001E0078,gL01FFC0J07FF81FHFC0I0IFC03FF807FF0M03FF80J03FF81FFC0FIFC0FFE07FF07DFHF03FF80H07FHFE00FIFC03FE001C0070,gL03FFC0J07FF83FIFIABFHFE03FF80FHFN03FF80J03FF81FFE0FIFE0FFE07FF83FIF03FF80H02AHAE00EAHA8022E203E2278,gL01FFC0J07FF81FPFC03FF807FF0M03FF80J03FF81FFC07FHF80FFE07FF01FHFE03FF80L0F31C0L0E3FIFE70,gL03FFC0J07FF81FPFC03FF80FHFN03FF80J03FF81FFE03FHF80FFE07FF80FHFE03FF80L0E78E0L0E3FIFE78,gL01DFC0J05FD01FDFDFDFDFDFC01FD807DF0M01FD80J03DF81DFC03FDF00DFC05FD00FDFC01FD80M0580M0C3DFDFC70,gL03FFE0H0207FF83FPFE03FF80FHFN03FF80J03FF81FFE03FFE00FFE07FF80FHF803FF80M0380M0E2ABEAA78,gL01FFC0J07FF01FPFC03FF807FF0M03FF80J03FF81FFC01FFC00FFE07FF007FF003FF80M03C0M0E001C0070,gL03FFE80I0HFE01FHFE0H0BFHFC03FF80FHFN03FF80J03FF81FFE00FFC00FFE07FF803FF003FF80H07FOF80H0E001E0078,gL01FHFC0H07FDE01FHF80I07FFC03FF807FF0M03FF80J03FF81FFC007F800FFE07FF001FE003FF80H07FOF80H0E001C0070,gL03FOFE03FHFK03FFE03FF80FHFN03FF80J03FF81FFE003F800FFE07FF800FE003FF80H07FOF80H0E003E0078,gL01FOF801FFE0J03FFC03FF807FF0M03FF80J03FF81FFC001C0H0HFE07FF0H070H03FF80J03C0I0780J0E001C0078,gL03FOF801FFE0J03FFC03FF80FHFN03FF80J03FF81FFE0L0HFE07FF80K03FF80J03E0I0F80J0E001E0078,gL01DFHFDFHFDC001FDC0J01FFC03FD807DF0M03FD80J03DF81DFC0L0HFC07FD0L01FD80J01D0H01F0K0E001C0078,gL03FNF8003FFE0J03FFE03FF80FHFN03FF80J03FF81FFE0L0HFE07FF80K03FF80K0F8003E0K0E023E003820,gL01FHFC0M01FFC0J01FFC03FF807FF0M03FF80J03FF81FFC0L0HFE07FF0L03FF80K07C007C0K0E001C003830,gL03FHF80M01FFC0J01FFC03FF80FHFN03FF80J03FF81FFE0L0HFE07FF80K03FF80K03E00F80K0E001E003838,gL01FFC0N01FFC0J01FFC03FF807FF0M03FF80J05FF81FFC0L0HFE07FF0L03FF80K01D81F0L0E081C003838,gL03FFE0N03FFE0J03FFE03FF807FF80L03FF80J07FF81FFE0L0HFE07FF80K03FF80L0FE7E0L0E3C3E003838,gL01FFC0N01FFC0J01FFC03FF807FF80L03FFC0J07FF81FFC0L0HFE07FF0L03FF80L03FF80L0E7C1C003C38,gL03FFC0N01FFC0J01FFC03FF807FFC0L03FFE0J0IF81FFE0L0HFE07FF80K03FF80M0HF80L0EFC1E003C38,gL01DFC0N01FDC0J01DFC01FD803DFC0L01FHFJ01FDF01DFC0L0DFC05FD0L01FD80L01DFC0L0DF01C001C70,gK023FFC0N03FFE0I023FFE03FF803FHFIA2AA03FHFJAIFE01FFE0L0HFE07FF80K03FF80K02FIFA20I01FE03E003E78,gL01FFC0N01FFC0J01FFC03FF801FNFH0PFE01FFC0L0HFE07FF0L03FF80K07FC7FF0J01FC01C001F70,gL03FFC0N01FFC0J01FFC03FF800FNF80FOFC01FFE0L0HFE07FF80K03FF80I02FFE80FHFE8003F801E0H0HF8,gL01FFC0N01FFC0J01FFC03FF8007FMF803FNFH01FFC0L0HFE07FF0L03FF80H07FHFI01FHFC001E001C0H07F0,gL03FFC0N03FFE0J03FFE03FF8003FMF802FMFE001FFE0L0HFE07FF80K03FF80H0IFA0I03FF80H0E003E0H07F0,gL01FF80N01FFC0J01FFC01FF0I07FLFC001FLFI01FFC0L0HFC03FF0L03FF0I07FC0K01F80K01C0H03E0,gM0I8P0I8L0I8H0H8K0N8J0L8J0I8N0H8H0H8N0H8J0380N080K01E0I0E0,,::::::::::::::::::::::::::::::::jU020J02,,:::::g050gP010H010ggH05D0H010M010K040H054040I040H0101C0H040H050J015D5H54005010J0C0150140I050K050M040H05D0H014001,hI0E0H0380K020H020I080Y030380I0E03E0K0H2L070L02E0M03C002,,::::::::::::::::::::~DG001.GRF,01024,016,
,:::::::::::::::::::L040H040N040,,:::S02,M03FHFHC3007FIFC,M02AHAH82002BAHA8,N06040C30070H05C,N02080820020I08,N07040C10070H01C,N02080820020I08,N06040C7007FIFC,M06AEE882002EAEA80J08,M07FHFHC30070H01C0I01C,N02080820Q028,L0404040C340L040H014,N0C0C00206EKEC0,M01C0400307FKFC0,N080803A0H08,M0700407C0014,V020,P010J01FIFC,P020J02BAHA8,M01FJFE0K04C,N0LEM08,P030N01C0I010,P020O080I028,P030N01C0I03C,P020O080J08,M07FKFC0H07D70,M02AKA80H02A80,,:::::::::::~DG002.GRF,01024,016,
,:::M08,,::::::J08A0860H01FIFE,J0C41040H01DIDC,J0E23060H0180H02,J040H040H0175H54,K0H20C0H01FIFE,K04005DC010I04,I03FHF8FFE01FIFE,I0175510100157554,I080E098080I08080J0E,J01C018101DKDC0I0C,J03A838183FKFE0I0E,J04244010R04,J0E22E83803FIFE,I01C41041001DIDC,I038200E300300802,J010H0410015I54,J01800E2001FIFE,I01DHD04400100C04,I03FHF02600380802,J040101400157554,J0E0203C001FIFE,J0C0401C001004040J04,J070E0380J080L0E,J0150034005K540I04,I080F88EE08FKFC0I0E,K0540C10J0C,J038E38383FKFE0,J05005004177575750,I03E00E00E0,,::::::::::::::::::::::~DG003.GRF,01536,024,
,::::::::::::::::::::::S080J080R08,,M0180W0380K0380,M010J0J5750M010J0401,M0180I0LF80L0380I0E8380,M010J080J0C0L010J0105DID,M0180I080J080L0380I018FJF,M010X010L04,K0LF808FIFH8M0B800800180H08,K0ID5D5808DID8C0L010K015DD5C,K08018018080080080L0380I0823FHF8,J010010010U0157501404,K08018018080080080L03FHF80E061808,K0C018010J0C00C0L010J05040408,K0801801808FIFH8M0380I03860608,J010010010H0J5O010L040010,K08018018080088080L0380I080E0808,K0C0180180800C00C0L010K05D5DHD,K0LF808008E080L0380J03FJF80,J017577550K040N010L040010,K08018018080082080L0380I038C0H08,K0C0100100800C00C0L010J01041010,M0180I08FIFH8M0380I03080808,M010J017H7540M010J010H0410,M098008080J080L0B80I0A080808,M0180I080J0C0L010J040DIDC,M0180I080J080L0380I060FIFE,M010J0H575750J01757H757040I010,M0180I0LF80I01FKFE0E0I038,M0180O0C0R040H05D0,M0180I080J080V0FE0,,:::::::::~DG004.GRF,01024,016,
,L040H040J040,,:N020H080,N07001,N020020I02EHEA8,N0IF7FFC07FIFC,N0IA2AB8020I08,M01440440H070H05C,M02080820H020I08,M04071830H070H01C,N020I08003AHAB8,N070H010H07FIFC0I014,N0202EHEH020I080I028,N0303FHFR01C,M03AA20030R08,L047FF700347FKFC0,N020200206EAEHEAC0,N0703FHFH018,N0203BAA0H08,N07470030010,N0A62002002EIEC,M01373001003FIFC,N0I2IAM08,L043707FHFL04C,M0H2020020L080J08,M043030010K01C0I01C,N02020020L080I028,M047070030K0140I014,N0202EHEJ0HE60,N0303FHFJ07FC0,N0202002,N0707003,,:::::::::::::::::::::::::::::~DG005.GRF,01024,016,
,:::::::::::L0404040H040H04040,,::P030M0546,P020J0LE,P070I01FF9110,M0200ABA0J020,M0741FHFI0407040,M0200802006EAEEFE80,M0103004007FKFC0,N0820080J020,M01C6010K030L010,O0EAEHEH0AEJEJ028,O03FHFC00FJFC0I038,Q0202008020,P0460640C07004,Q020200EKE,N01FJFC0FJFC,N08AJA808020,M01C0060600C03004,N080060200EIEAE,M0180040400FJFC,M0182AIAH08020,M0307FHFE0I070,M020H020200EJEA0I020,M070H040H01FKFJ038,M020H020K020L028,M060H060K010L010,M020H060H06EKE80,O01FC0H07FKFC0,P0A8,,:::::::::::::::::::~DG006.GRF,01536,016,
,::::::::::::::::::::::::::::K010I040,K030I08008,K010I04001DIDC0,J02300808003FIF80,J041104040010I040,J023B8E080020I0C0,J0I1010C0010I040,J0H3203880020I080,J0H1J0400175H540,I080BA8008003FIFC80H0H80,K010I040010I040I01C0,K030I080Q0380,J057514040Q01,J0IF8E080FLFE,K010010C05DKD4,K030I080H080,K0540H04001,K0FE0H0HE0380,K0D10055C01DHDFC0,K0B3BFFA003FIFE0,J0H1010040L040,J03A80H080L0C0,J0410I0C0L040I0180,J0630I080L0C0I03C0,J0410I040Q0140,I08030I080I080180J080,K010I0C0I05C5,K030I080I07FE,K010I040,K020I080,,::::::::::::::::::::::::::::::::::::^XA
^MMT
^PW1228
^LL1772
^LS0
^FT320,288^XG000.GRF,1,1^FS
^FT64,416^XG001.GRF,1,1^FS
^FT768,512^XG002.GRF,1,1^FS
^FT992,672^XG003.GRF,1,1^FS
^FT64,544^XG004.GRF,1,1^FS
^FT64,672^XG005.GRF,1,1^FS
^FT768,448^XG006.GRF,1,1^FS
^FT189,655^A0N,42,40^FH\^FD#{params[:net_weight]}kg^FS
^FT881,488^A0N,42,40^FH\^FD#{params[:pack_qty]}PCS^FS
^FT876,413^A0N,42,40^FH\^FD#{params[:model_number]}^FS
^FT186,408^A0N,42,40^FH\^FD#{params[:material_number]}^FS
^BY2,3,65^FT158,1339^BCN,,Y,N
^FD#{sn_array[0]}^FS
^BY2,3,65^FT672,1237^BCN,,Y,N
^FD#{sn_array[1]}^FS
^BY2,3,65^FT672,1134^BCN,,Y,N
^FD#{sn_array[2]}^FS
^BY2,3,65^FT672,1031^BCN,,Y,N
^FD#{sn_array[3]}^FS
^BY2,3,65^FT672,928^BCN,,Y,N
^FD#{sn_array[4]}^FS
^BY2,3,65^FT158,1237^BCN,,Y,N
^FD#{sn_array[5]}^FS
^BY2,3,65^FT158,1134^BCN,,Y,N
^FD#{sn_array[6]}^FS
^BY2,3,65^FT158,1031^BCN,,Y,N
^FD#{sn_array[7]}^FS
^BY2,3,65^FT158,928^BCN,,Y,N
^FD#{sn_array[8]}^FS
^BY3,3,65^FT194,578^BCN,,N,N
^FD#{label_barcode}^FS
^FT213,491^A0N,42,40^FH\^FD#{label_barcode}^FS
^PQ1,0,1,Y^XZ
^XA^ID000.GRF^FS^XZ
^XA^ID001.GRF^FS^XZ
^XA^ID002.GRF^FS^XZ
^XA^ID003.GRF^FS^XZ
^XA^ID004.GRF^FS^XZ
^XA^ID005.GRF^FS^XZ
^XA^ID006.GRF^FS^XZ
    "
   s = TCPSocket.new(params[:printer_ip], '9100')
    s.write zpl_command
    s.close
  end

  def self.update_kcode(barcode, kcode)
    update_count = 0
    sql = "update txdb.phicomm_mes_001 set kcode='#{kcode}' where (sn='#{barcode}' or mac_add='#{barcode}')"
    begin
      update_count = PoReceipt.connection.execute(sql)
    rescue
    end
    update_count
  end

  def self.get_printer(pc_ip, program)
    # pc_ip
    # program
    # printer_ip
    # printer_port
    sql = "select printer_ip, printer_port from txdb.phicomm_mes_printer where pc_ip=? and program=?"
    records = PoReceipt.find_by_sql([sql, pc_ip, program])
    if records.present?
      return [records.first.printer_ip, records.first.printer_port]
    else
      sql = "insert into txdb.phicomm_mes_printer (pc_ip, program, printer_port) values ('#{pc_ip}','#{program}','9100')"
      PoReceipt.connection.execute(sql)
      return ['', '9100']
    end
  end

  def self.update_printer(pc_ip, program, printer_ip, printer_port = '9100')
    sql = "update txdb.phicomm_mes_printer set printer_ip='#{printer_ip}', printer_port='#{printer_port}' where pc_ip='#{pc_ip}' and program='#{program}'"
    PoReceipt.connection.execute(sql)
  end

end

